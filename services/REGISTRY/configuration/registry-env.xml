<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<configuration supports_adding_forbidden="true">
    <property require-input="true">
        <name>download_url</name>
        <value>http://assets.example.com/hadoop/registry-0.3.0.tar.gz</value>
        <description>下载路径</description>
    </property>
    <property require-input="true">
        <name>install_dir</name>
        <value>/opt/registry</value>
        <description>安装目录</description>
    </property>

    <property>
        <name>registry_user</name>
        <display-name>Registry User</display-name>
        <value>registry</value>
        <property-type>USER</property-type>
        <description/>
        <value-attributes>
            <type>user</type>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>registry_log_dir</name>
        <value>/var/log/registry</value>
        <description/>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>registry_pid_dir</name>
        <value>/var/run/registry</value>
        <display-name>Registry PID dir</display-name>
        <description/>
        <value-attributes>
            <type>directory</type>
            <editable-only-at-install>true</editable-only-at-install>
            <overridable>false</overridable>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>registry_user_nofile_limit</name>
        <value>65536</value>
        <description>Max open files limit setting for REGISTRY user.</description>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>registry_user_nproc_limit</name>
        <value>65536</value>
        <description>Max number of processes limit setting for REGISTRY user.</description>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>registry_jaas</name>
        <display-name>registry_jaas template</display-name>
        <description>registry jaas config</description>
        <value>
Client {
    com.sun.security.auth.module.Krb5LoginModule required
    useKeyTab=true
    keyTab="{{registry_ui_keytab_path}}"
    storeKey=true
    useTicketCache=false
    principal="{{registry_ui_jaas_principal}}";
};
        </value>
        <value-attributes>
            <type>content</type>
            <show-property-name>false</show-property-name>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>

    <!-- registry-env.sh -->
    <property>
        <name>content</name>
        <display-name>registry-env template</display-name>
        <description>This is the jinja template for streamline-env.sh file</description>
        <value>
#!/bin/bash

# Set REGISTRY specific environment variables here.

# The java implementation to use.
export JAVA_HOME={{java64_home}}
export PATH=$PATH:$JAVA_HOME/bin
export PID_DIR={{registry_pid_dir}}
export LOG_DIR={{registry_log_dir}}
export REGISTRY_KERBEROS_PARAMS={{registry_kerberos_params}}
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>
    <property>
        <name>bootstrap</name>
        <display-name>bootstrap-storage template</display-name>
        <description>This is the jinja template for bootstrap-storage.sh file</description>
        <value>
<![CDATA[
#!/usr/bin/env bash

#
# Copyright 2017 Hortonworks.

# Resolve links - $0 may be a softlink
PRG="${0}"

while [ -h "${PRG}" ]; do
  ls=`ls -ld "${PRG}"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "${PRG}"`/"$link"
  fi
done

BOOTSTRAP_DIR=`dirname ${PRG}`
CONFIG_FILE_PATH=${BOOTSTRAP_DIR}/../conf/registry.yaml
MYSQL_JAR_URL_PATH=/usr/share/java/mysql-connector-java.jar
SCRIPT_ROOT_DIR="${BOOTSTRAP_DIR}/sql"

# Which java to use
if [ -z "${JAVA_HOME}" ]; then
  JAVA="java"
else
  JAVA="${JAVA_HOME}/bin/java"
fi

cp -f $MYSQL_JAR_URL_PATH $BOOTSTRAP_DIR/lib/mysql-connector-java-5.1.40-bin.jar
cp -f $MYSQL_JAR_URL_PATH $BOOTSTRAP_DIR/../libs/mysql-connector-java-5.1.40-bin.jar

TABLE_INITIALIZER_MAIN_CLASS=com.hortonworks.registries.storage.tool.TablesInitializer
for file in "${BOOTSTRAP_DIR}"/lib/*.jar;
do
    CLASSPATH="$CLASSPATH":"$file"
done

echo "Using Configuration file: ${CONFIG_FILE_PATH}"

function dropTables {
    ${JAVA} -Dbootstrap.dir=$BOOTSTRAP_DIR  -cp ${CLASSPATH} ${TABLE_INITIALIZER_MAIN_CLASS} -m ${MYSQL_JAR_URL_PATH} -c ${CONFIG_FILE_PATH} -s ${SCRIPT_ROOT_DIR} --drop
}

function createTables {
    ${JAVA} -Dbootstrap.dir=$BOOTSTRAP_DIR  -cp ${CLASSPATH} ${TABLE_INITIALIZER_MAIN_CLASS} -m ${MYSQL_JAR_URL_PATH} -c ${CONFIG_FILE_PATH} -s ${SCRIPT_ROOT_DIR} --create
}

function checkStorageConnection {
    ${JAVA} -Dbootstrap.dir=$BOOTSTRAP_DIR  -cp ${CLASSPATH} ${TABLE_INITIALIZER_MAIN_CLASS} -m ${MYSQL_JAR_URL_PATH} -c ${CONFIG_FILE_PATH} -s ${SCRIPT_ROOT_DIR} --check-connection
}

function printUsage {
    echo "USAGE: $0 [create|drop|check-connection|drop-create]"
}

opt="create"

if [ $# -gt 0 ]
then
    opt="$1"
fi

case "${opt}" in
create)
    createTables
    ;;
drop)
    dropTables
    ;;
drop-create)
    dropTables && createTables
    ;;
check-connection)
    checkStorageConnection
    if [ $? == 0 ]
    then
        echo "Connection check succeed."
        exit 0
    else
        echo "Connection check failed."
        exit 2
    fi
    ;;
*)
    printUsage
    exit 1
    ;;
esac

]]>
        </value>
        <value-attributes>
            <type>content</type>
        </value-attributes>
        <on-ambari-upgrade add="true"/>
    </property>
</configuration>
